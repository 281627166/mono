MACRO(GET_TARGET_PROPERTY_WITH_DEFAULT _variable _target _property _default_value)
   GET_TARGET_PROPERTY (${_variable} ${_target} ${_property})
   IF (${_variable} MATCHES NOTFOUND)
     SET (${_variable} ${_default_value})
   ENDIF (${_variable} MATCHES NOTFOUND)
ENDMACRO (GET_TARGET_PROPERTY_WITH_DEFAULT)

MACRO(CREATE_LIBTOOL_FILE _target _static_target _install_DIR)
   GET_TARGET_PROPERTY(_target_location ${_target} LOCATION)
   GET_TARGET_PROPERTY(_static_target_location ${_static_target} LOCATION)
   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_static_lib ${_static_target} STATIC_LIB "")
   GET_FILENAME_COMPONENT(_target_static_libname ${_static_target_location} NAME)
   SET(_target_static_lib ${CMAKE_INSTALL_PREFIX}${_install_DIR}/${_target_static_libname})
   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_dependency_libs ${_target} LT_DEPENDENCY_LIBS "")
   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_current ${_target} LT_VERSION_CURRENT 0)
   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_age ${_target} LT_VERSION_AGE 0)
   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_revision ${_target} LT_VERSION_REVISION 0)
   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_installed ${_target} LT_INSTALLED yes)
   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_shouldnotlink ${_target} LT_SHOULDNOTLINK yes)
   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_dlopen ${_target} LT_DLOPEN "")
   GET_TARGET_PROPERTY_WITH_DEFAULT(_target_dlpreopen ${_target} LT_DLPREOPEN "")
   GET_FILENAME_COMPONENT(_laname_name ${_target_location} NAME_WE)
   GET_FILENAME_COMPONENT(_soname ${_target_location} NAME)
   SET(_laname ${PROJECT_BINARY_DIR}/${_laname_name}.la)
   FILE(WRITE ${_laname} "# ${_laname} - a libtool library file\n")
   FILE(APPEND ${_laname} "# Generated by CMake ${CMAKE_VERSION} (like GNU libtool)\n")
   FILE(APPEND ${_laname} "\n# Please DO NOT delete this file!\n# It is necessary for linking the library with libtool.\n\n" )
   FILE(APPEND ${_laname} "# The name that we can dlopen(3).\n")
   FILE(APPEND ${_laname} "dlname='${_soname}'\n\n")
   FILE(APPEND ${_laname} "# Names of this library.\n")
   FILE(APPEND ${_laname} "library_names='${_soname}.${_target_current}.${_target_age}.${_target_revision} ${_soname}.${_target_current} ${_soname}'\n\n")
   FILE(APPEND ${_laname} "# The name of the static archive.\n")
   FILE(APPEND ${_laname} "old_library='${_target_static_lib}'\n\n")
   FILE(APPEND ${_laname} "# Libraries that this one depends upon.\n")
   FILE(APPEND ${_laname} "dependency_libs='${_target_dependency_libs}'\n\n")
   FILE(APPEND ${_laname} "# Names of additional weak libraries provided by this library\n")
   FILE(APPEND ${_laname} "weak_library_names=\n\n")
   FILE(APPEND ${_laname} "# Version information for ${_laname_name}.\n")
   FILE(APPEND ${_laname} "current=${_target_current}\n")
   FILE(APPEND ${_laname} "age=${_target_age}\n")
   FILE(APPEND ${_laname} "revision=${_target_revision}\n\n")
   FILE(APPEND ${_laname} "# Is this an already installed library?\n")
   FILE(APPEND ${_laname} "installed=${_target_installed}\n\n")
   FILE(APPEND ${_laname} "# Should we warn about portability when linking against -modules?\n")
   FILE(APPEND ${_laname} "shouldnotlink=${_target_shouldnotlink}\n\n")
   FILE(APPEND ${_laname} "# Files to dlopen/dlpreopen\n")
   FILE(APPEND ${_laname} "dlopen='${_target_dlopen}'\n")
   FILE(APPEND ${_laname} "dlpreopen='${_target_dlpreopen}'\n\n")
   FILE(APPEND ${_laname} "# Directory that this library needs to be installed in:\n")
   FILE(APPEND ${_laname} "libdir='${CMAKE_INSTALL_PREFIX}${_install_DIR}'\n")
   INSTALL( FILES ${_laname} DESTINATION ${CMAKE_INSTALL_PREFIX}${_install_DIR})
ENDMACRO(CREATE_LIBTOOL_FILE)

function (create_libtool name shared_target static_target dir)
	set (script ${PROJECT_SOURCE_DIR}/generate-libtool.sh)
	set (template ${PROJECT_SOURCE_DIR}/lib${name}.la.in)
	set (lafile lib${name}.la)
	set (lafile_path ${PROJECT_BINARY_DIR}/${lafile})
	set (dlname $<TARGET_FILE_NAME:${shared_target}>)
	set (soname $<TARGET_SONAME_FILE_NAME:${shared_target}>)
	set (old_library $<TARGET_FILE_NAME:${static_target}>)
	set (libdir ${dir})

    get_target_property_with_default (target_current ${shared_target} LT_VERSION_CURRENT 0)
	get_target_property_with_default (target_dependency_libs ${shared_target} LT_DEPENDENCY_LIBS "")
	get_target_property_with_default (target_current ${shared_target} LT_VERSION_CURRENT 0)
	get_target_property_with_default (target_age ${shared_target} LT_VERSION_AGE 0)
	get_target_property_with_default (target_revision ${shared_target} LT_VERSION_REVISION 0)
	get_target_property_with_default (target_installed ${shared_target} LT_INSTALLED yes)
	get_target_property_with_default (target_shouldnotlink ${shared_target} LT_SHOULDNOTLINK yes)
	get_target_property_with_default (target_dlopen ${shared_target} LT_DLOPEN "")
	get_target_property_with_default (target_dlpreopen ${shared_target} LT_DLPREOPEN "")

    set (library_names "'${soname}.${target_current}.${target_age}.${target_revision} ${soname}.${target_current} ${soname}'")

	set (
		script_args

		${template}
		${lafile_path}
		${lafile}
		${dlname}
		${libdir}
		${library_names}
		${old_library}
		${target_current}
		${target_age}
		${target_revision}
		${target_installed}
	)

	add_custom_command (
		OUTPUT ${lafile}
		COMMAND ${script} ${script_args}
	)
	add_custom_target (
		create_libtool_${name} ALL
		DEPENDS ${lafile}
	)
endfunction (create_libtool)

create_libtool (foo mono-btls-shared mono-btls-static ${PROJECT_BINARY_DIR})
